version: "3"
services:
  service.rss:
    image: wangqiru/ttrss:latest
    container_name: ttrss
    ports:
      - 181:80
    environment:
      - SELF_URL_PATH=https://rss.eisvogelweg2.de/ # please change to your own domain
      - DB_PASS=ttrss # use the same password defined in `database.postgres`
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - feed-icons:/var/www/feed-icons/
    networks:
      - t2_proxy
      - service_only
      - database_only
    stdin_open: true
    tty: true
    restart: always
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.ttrss-rtr.entrypoints=https"
      - "traefik.http.routers.ttrss-rtr.rule=Host(`rss.$DOMAINNAME`)"
      - "traefik.http.routers.ttrss-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.ttrss-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.ttrss-rtr.service=ttrss-svc"
      - "traefik.http.services.ttrss-svc.loadbalancer.server.port=80"


  service.mercury: # set Mercury Parser API endpoint to `service.mercury:3000` on TTRSS plugin setting page
    image: wangqiru/mercury-parser-api:latest
    container_name: mercury
    networks:
      - t2_proxy
      - service_only
    restart: always

  service.opencc: # set OpenCC API endpoint to `service.opencc:3000` on TTRSS plugin setting page
    image: wangqiru/opencc-api-server:latest
    container_name: opencc
    environment:
      - NODE_ENV=production
    networks:
      - service_only
    restart: always

  database.postgres:
    image: postgres:13-alpine
    container_name: postgres
    environment:
      - POSTGRES_PASSWORD=ttrss # feel free to change the password
    volumes:
      - ${DATADIR}/ttrss/postgres/data/:/var/lib/postgresql/data # persist postgres data to ~/postgres/data/ on the host
    networks:
      - database_only
    restart: always

  # utility.watchtower:
  #   container_name: watchtower
  #   image: containrrr/watchtower:latest
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     - WATCHTOWER_CLEANUP=true
  #     - WATCHTOWER_POLL_INTERVAL=86400
  #   restart: always

volumes:
  feed-icons:

networks:
  service_only: # Provide the communication network between services only
    internal: true
  database_only: # Provide the communication between ttrss and database only
    internal: true
  t2_proxy:
    external: true
